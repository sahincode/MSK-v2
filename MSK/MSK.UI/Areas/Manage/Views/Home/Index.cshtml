@model AdminHomeViewModel
@inject LayoutService _layoutService
@{
    string GetButtonColor(double percentage)
    {
        if (percentage < 35)
        {
            return "bg-danger";
        }
        else if (percentage <= 50 && percentage >= 35)
        {
            return "bg-warning";
        }
        else if (percentage > 50 && percentage < 80)
        {
            return "bg-primary";
        }
        else if (percentage >= 80 && percentage < 90)
        {
            return "bg-info";
        }
        else
        {
            return "bg-success";
        }


    }
}
<div class="container-fluid">
    <!-- Content Row -->
    <!-- Content Row -->
    <div class="row">
        <h5 class="float-center text-info">Election Statistics</h5>
        <!-- Content Column -->
        @foreach (var election in Model.ElectionIndexDtos)
        {
            <div class="col-lg-6 mb-4">

                <!-- Project Card Example -->
                <div class="card shadow mb-4">
                    <div class="card-header py-3">
                        <h6 class="m-0 font-weight-bold text-primary">@election.Name <span class="float-right">@election.StartDate.ToString("dd MMM yyyy")</span></h6>
                    </div>
                    <div class="card-body">
                        @foreach (var candidate in election.Candidates)
                        {
                            candidate.VotedPercent = (100 / (double)election.VotersCount) * candidate.VotedCount;
                            <h4 class="small font-weight-bold">
                                @candidate.FullName <span class="float-right">@(candidate.VotedPercent > 50 ? "Elected" : candidate.VotedPercent.ToString("0.#") + "%")</span>
                            </h4>
                            <div class="progress mb-4">
                                <div class="progress-bar @GetButtonColor(candidate.VotedPercent)" role="progressbar" style="width: @(candidate.VotedPercent.ToString("0.#"))%"
                                     aria-valuenow="@(candidate.VotedPercent.ToString("0.#"))" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>

                        }
                    </div>
                </div>

                <!-- Color System -->


            </div>
        }



    </div>
    <div class="row">

        <!-- Area Chart -->
        <div class="col-xl-8 col-lg-7">
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary">Elections</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    <div class="chart-area">
                        <canvas id="ElectionChat" width="972" height="400"></canvas>
                    </div>
                </div>

                <!-- JavaScript to fill the chart -->

            </div>
        </div>

        <!-- Pie Chart -->

    </div>
    <div class="row">
        @for (int i = 0; i < Model.ElectionIndexDtos.Count; i++)
        {
            <div class="col-xl-4 col-lg-5">
                <div class="card shadow mb-4">
                    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                        <h6 class="m-0 font-weight-bold text-primary">@(Model.ElectionIndexDtos[i].Name)</h6>
                    </div>
                    <div class="card-body">
                        <div class="chart-pie pt-4 pb-2">
                            <canvas id="pieChart_@(Model.ElectionIndexDtos[i].Id)" width="445" height="306"></canvas>
                        </div>
                        <div class="mt-4 text-center small" id="legend_@(Model.ElectionIndexDtos[i].Id)"></div>
                    </div>
                </div>
            </div>
            <script>
                // Function to make an asynchronous AJAX request
                async function fetchCandidateVotes(id) {
                    try {
                        const response = await fetch(`/manage/home/GeCandidatesVotes?id=${id}`);
                        const data = await response.json();
                        return data;
                    } catch (error) {
                        console.error('Error fetching candidate votes data:', error);
                    }
                }

                // Use an IIFE to call the async function
                (async function () {
                    // Make an asynchronous AJAX request to fetch candidate votes data for the current election
                    const electionData = await fetchCandidateVotes(@Model.ElectionIndexDtos[i].Id);
                    console.log(electionData);
                    // Get the canvas element
                    const ctx = document.getElementById(`pieChart_${@Model.ElectionIndexDtos[i].Id}`).getContext('2d');

                    // Create the pie chart using the fetched data
                    const myPieChart = new Chart(ctx, {
                        type: 'pie',
                        data: {
                            labels: electionData.labels,
                            datasets: [{
                                data: electionData.data,
                                backgroundColor: ['rgba(78, 115, 223, 0.9)', 'rgba(28, 200, 138, 0.9)', 'rgba(0, 123, 255, 0.9)'],
                            }],
                        },
                        options: {
                            legend: {
                                display: false,
                            },
                        },
                    });

                    // Add legend dynamically based on data
                    const legendContainer = document.getElementById(`legend_${@Model.ElectionIndexDtos[i].Id}`);
                    electionData.labels.forEach((name, index) => {
                        const legendItem = document.createElement('span');
                        legendItem.className = 'mr-2';
                        legendItem.innerHTML = `<i class="fas fa-circle" style="color: ${myPieChart.data.datasets[0].backgroundColor[index]}"></i> ${name}`;
                        legendContainer.appendChild(legendItem);
                    });
                })();
            </script>
        }

    </div>

</div>
@section chartsJs{


    <!-- Page level plugins -->
    <script src="~/admin/vendor/chart.js/CustomCharts.js"></script>
    <script src="~/admin/vendor/chart.js/Chart.min.js"></script>
    <!-- Page level custom scripts -->
    <script src="~/admin/js/demo/chart-area-demo.js"></script>
    <script src="~/admin/js/demo/chart-pie-demo.js"></script>
}